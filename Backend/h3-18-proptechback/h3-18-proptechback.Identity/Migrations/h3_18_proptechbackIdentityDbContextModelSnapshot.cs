// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using h3_18_proptechback.Identity;

#nullable disable

namespace h3_18_proptechback.Identity.Migrations
{
    [DbContext(typeof(h3_18_proptechbackIdentityDbContext))]
    partial class h3_18_proptechbackIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3d46b36f-1b0b-46b1-8d48-c92471fef3f5",
                            Name = "Administrador",
                            NormalizedName = "Administrador"
                        },
                        new
                        {
                            Id = "71904571-af3d-41db-9e20-724c63274628",
                            Name = "Operador",
                            NormalizedName = "Operador"
                        },
                        new
                        {
                            Id = "5c4129ad-e468-49fc-a0e1-315398c31107",
                            Name = "Cliente",
                            NormalizedName = "Cliente"
                        },
                        new
                        {
                            Id = "0f50b7ed-d655-4ddb-b7d8-c0aa6f3ca027",
                            Name = "Inversor",
                            NormalizedName = "Inversor"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1a103102-21f7-4e3f-b7b0-6f192fb511e5",
                            RoleId = "3d46b36f-1b0b-46b1-8d48-c92471fef3f5"
                        },
                        new
                        {
                            UserId = "7691104e-2fde-4a76-8f1a-4da658956946",
                            RoleId = "0f50b7ed-d655-4ddb-b7d8-c0aa6f3ca027"
                        },
                        new
                        {
                            UserId = "d0219b3e-50f7-47bb-8894-19a980d87c0f",
                            RoleId = "71904571-af3d-41db-9e20-724c63274628"
                        },
                        new
                        {
                            UserId = "0d03a597-4e8a-412a-b634-130b3e333244",
                            RoleId = "5c4129ad-e468-49fc-a0e1-315398c31107"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("h3_18_proptechback.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1a103102-21f7-4e3f-b7b0-6f192fb511e5",
                            AccessFailedCount = 0,
                            Apellido = "general",
                            ConcurrencyStamp = "afcecc94-9589-4110-99e2-91a88a023eed",
                            Email = "admin@locahost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nombre = "Admin",
                            NormalizedEmail = "admin@locahost.com",
                            NormalizedUserName = "AdminGeneral",
                            PasswordHash = "AQAAAAIAAYagAAAAED3+Thx5d0yb4C7b/bYNNupLsvNc1PzmuOtAojl7kT2VYQo25QwxMWBeJyrXgTYPuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae6e0c91-76b6-43f1-80dc-9b4f9aa37802",
                            TwoFactorEnabled = false,
                            UserName = "AdminGeneral"
                        },
                        new
                        {
                            Id = "7691104e-2fde-4a76-8f1a-4da658956946",
                            AccessFailedCount = 0,
                            Apellido = "Perez",
                            ConcurrencyStamp = "0b07d97b-56a6-4ed1-b80b-1c0f07aef6ae",
                            Email = "inversor@locahost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nombre = "Juan Carlos",
                            NormalizedEmail = "inversor@locahost.com",
                            NormalizedUserName = "Inversor01",
                            PasswordHash = "AQAAAAIAAYagAAAAEEVS0p2FwssCQ78lgYkId2DiPhvDJgkswCZV5tOw0H+SPdE2ChLU8hwpKafUrRYzQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4001569-d1e9-4dc9-8d99-197843a96d02",
                            TwoFactorEnabled = false,
                            UserName = "Inversor01"
                        },
                        new
                        {
                            Id = "d0219b3e-50f7-47bb-8894-19a980d87c0f",
                            AccessFailedCount = 0,
                            Apellido = "Delgado",
                            ConcurrencyStamp = "85c53340-3fa3-4910-b6d1-6417fa456b16",
                            Email = "operador@locahost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nombre = "Carlos",
                            NormalizedEmail = "operador@locahost.com",
                            NormalizedUserName = "operador01",
                            PasswordHash = "AQAAAAIAAYagAAAAEBHIH2sOu+dD7pYukCCR1S3vFUqvQLzURg7Jaeh2NmNYgSLCDWLFuG+y0TU2IpNWcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09737da1-b1b3-4d55-bcd2-09f6f6210910",
                            TwoFactorEnabled = false,
                            UserName = "operador01"
                        },
                        new
                        {
                            Id = "0d03a597-4e8a-412a-b634-130b3e333244",
                            AccessFailedCount = 0,
                            Apellido = "Estevez",
                            ConcurrencyStamp = "9f246ce7-3817-47ba-99f6-0e265f7b650f",
                            Email = "cliente@locahost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nombre = "Miguel",
                            NormalizedEmail = "cliente@locahost.com",
                            NormalizedUserName = "cliente01",
                            PasswordHash = "AQAAAAIAAYagAAAAEBbeRk2hg5NKp89uA0WpiQ67NZ8Wp1wG/lNkEt7pJ2MeEggfTEoNwBUSftuUlsOtFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10030c11-abcc-4734-92f7-8c4e87197163",
                            TwoFactorEnabled = false,
                            UserName = "cliente01"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("h3_18_proptechback.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("h3_18_proptechback.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("h3_18_proptechback.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("h3_18_proptechback.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
